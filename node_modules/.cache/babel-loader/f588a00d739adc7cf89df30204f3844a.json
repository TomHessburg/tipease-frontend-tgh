{"ast":null,"code":"import axios from \"axios\";\nexport var LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport var TRANSFER_TO_BANK_START = \"TRANSFER_TO_BANK_START\";\nexport var TRANSFER_TO_BANK_SUCCESS = \"TRANSFER_TO_BANK_SUCCESS\";\nexport var TRANSFER_TO_BANK_FAIL = \"TRANSFER_TO_BANK_FAIL\";\nexport var PAY_YOURSELF_20_START = \"PAY_YOURSELF_20_START\";\nexport var PAY_YOURSELF_20_SUCCESS = \"PAY_YOURSELF_20_SUCCESS\";\nexport var PAY_YOURSELF_20_FAIL = \"PAY_YOURSELF_20_FAIL\";\nexport var EDIT_ACCOUNT_START = \"EDIT_ACCOUNT_START\";\nexport var EDIT_ACCOUNT_SUCCESS = \"EDIT_ACCOUNT_SUCCESS\";\nexport var EDIT_ACCOUNT_FAIL = \"EDIT_ACCOUNT_FAIL\";\nexport var GET_ALL_SW_START = \"GET_ALL_SW_START\";\nexport var GET_ALL_SW_SUCCESS = \"GET_ALL_SW_SUCCESS\";\nexport var GET_ALL_SW_FAIL = \"GET_ALL_SW_FAIL\";\nexport var loginSuccess = function loginSuccess(user) {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: user\n  };\n};\nexport var editSWAccount = function editSWAccount(newSettings, id) {\n  return function (dispatch) {\n    dispatch({\n      type: EDIT_ACCOUNT_START\n    });\n    var token = localStorage.getItem(\"token\");\n    axios.put(\"https://buildtipease.herokuapp.com/serviceWorkers/\".concat(id), newSettings, {\n      headers: {\n        authorization: token\n      }\n    }).then(function (response) {\n      dispatch({\n        type: EDIT_ACCOUNT_SUCCESS,\n        payload: newSettings\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: EDIT_ACCOUNT_FAIL\n      });\n    });\n  };\n};\nexport var transferToBank = function transferToBank(userId) {\n  return function (dispatch) {\n    dispatch({\n      type: TRANSFER_TO_BANK_START\n    });\n    var token = localStorage.getItem(\"token\");\n    axios.put(\"https://buildtipease.herokuapp.com/serviceWorkers/transferToBank/\".concat(userId), {}, {\n      headers: {\n        authorization: token\n      }\n    }).then(function (res) {\n      dispatch({\n        type: TRANSFER_TO_BANK_SUCCESS\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: TRANSFER_TO_BANK_FAIL\n      });\n    });\n  };\n}; //for testing other parts of the app, helps to easily be able to add some account balance :)\n\nexport var payYourself20Bucks = function payYourself20Bucks(userId) {\n  return function (dispatch) {\n    var token = localStorage.getItem(\"token\");\n    dispatch({\n      type: PAY_YOURSELF_20_START\n    });\n    axios.put(\"https://buildtipease.herokuapp.com/serviceWorkers/pay/\".concat(userId), {\n      payment: 20\n    }, {\n      headers: {\n        authorization: token\n      }\n    }).then(function (res) {\n      dispatch({\n        type: PAY_YOURSELF_20_SUCCESS\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: PAY_YOURSELF_20_FAIL\n      });\n    });\n  };\n};\nexport var getAllServiceWorkers = function getAllServiceWorkers() {\n  return function (dispatch) {\n    var token = localStorage.getItem(\"token\");\n    dispatch({\n      type: GET_ALL_SW_START\n    });\n    axios.get(\"https://buildtipease.herokuapp.com/serviceWorkers\", {\n      headers: {\n        authorization: token\n      }\n    }).then(function (res) {\n      dispatch({\n        type: GET_ALL_SW_SUCCESS,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: GET_ALL_SW_FAIL\n      });\n    });\n  };\n};\nexport var tipServiceWorker = function tipServiceWorker(id, payment) {\n  return function (dispatch) {\n    var token = localStorage.getItem(\"token\");\n    axios.put(\"https://buildtipease.herokuapp.com/serviceWorkers/pay/\".concat(id), payment, {\n      headers: {\n        authorization: token\n      }\n    }).then(function (res) {\n      console.log(res);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n};\nexport var rateServiceWorker = function rateServiceWorker(id, rating) {\n  return function (dispatch) {\n    var token = localStorage.getItem(\"token\");\n    axios.put(\"https://buildtipease.herokuapp.com/serviceWorkers/rate/\".concat(id), {\n      headers: {\n        authorization: token\n      }\n    }).then(function (res) {\n      console.log(res);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/tomhessburg/Desktop/lambda/tipease-frontend-tgh/tipease/src/actions/index.js"],"names":["axios","LOGIN_SUCCESS","TRANSFER_TO_BANK_START","TRANSFER_TO_BANK_SUCCESS","TRANSFER_TO_BANK_FAIL","PAY_YOURSELF_20_START","PAY_YOURSELF_20_SUCCESS","PAY_YOURSELF_20_FAIL","EDIT_ACCOUNT_START","EDIT_ACCOUNT_SUCCESS","EDIT_ACCOUNT_FAIL","GET_ALL_SW_START","GET_ALL_SW_SUCCESS","GET_ALL_SW_FAIL","loginSuccess","user","type","payload","editSWAccount","newSettings","id","dispatch","token","localStorage","getItem","put","headers","authorization","then","response","catch","err","transferToBank","userId","res","payYourself20Bucks","payment","getAllServiceWorkers","get","data","tipServiceWorker","console","log","rateServiceWorker","rating"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\n\nexport const TRANSFER_TO_BANK_START = \"TRANSFER_TO_BANK_START\";\nexport const TRANSFER_TO_BANK_SUCCESS = \"TRANSFER_TO_BANK_SUCCESS\";\nexport const TRANSFER_TO_BANK_FAIL = \"TRANSFER_TO_BANK_FAIL\";\n\nexport const PAY_YOURSELF_20_START = \"PAY_YOURSELF_20_START\";\nexport const PAY_YOURSELF_20_SUCCESS = \"PAY_YOURSELF_20_SUCCESS\";\nexport const PAY_YOURSELF_20_FAIL = \"PAY_YOURSELF_20_FAIL\";\n\nexport const EDIT_ACCOUNT_START = \"EDIT_ACCOUNT_START\";\nexport const EDIT_ACCOUNT_SUCCESS = \"EDIT_ACCOUNT_SUCCESS\";\nexport const EDIT_ACCOUNT_FAIL = \"EDIT_ACCOUNT_FAIL\";\n\nexport const GET_ALL_SW_START = \"GET_ALL_SW_START\";\nexport const GET_ALL_SW_SUCCESS = \"GET_ALL_SW_SUCCESS\";\nexport const GET_ALL_SW_FAIL = \"GET_ALL_SW_FAIL\";\n\nexport const loginSuccess = user => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: user\n  };\n};\n\nexport const editSWAccount = (newSettings, id) => dispatch => {\n  dispatch({ type: EDIT_ACCOUNT_START });\n\n  const token = localStorage.getItem(\"token\");\n\n  axios\n    .put(\n      `https://buildtipease.herokuapp.com/serviceWorkers/${id}`,\n      newSettings,\n      { headers: { authorization: token } }\n    )\n    .then(response => {\n      dispatch({\n        type: EDIT_ACCOUNT_SUCCESS,\n        payload: newSettings\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: EDIT_ACCOUNT_FAIL\n      });\n    });\n};\n\nexport const transferToBank = userId => dispatch => {\n  dispatch({\n    type: TRANSFER_TO_BANK_START\n  });\n\n  const token = localStorage.getItem(\"token\");\n\n  axios\n    .put(\n      `https://buildtipease.herokuapp.com/serviceWorkers/transferToBank/${userId}`,\n\n      {},\n      { headers: { authorization: token } }\n    )\n    .then(res => {\n      dispatch({\n        type: TRANSFER_TO_BANK_SUCCESS\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: TRANSFER_TO_BANK_FAIL\n      });\n    });\n};\n\n//for testing other parts of the app, helps to easily be able to add some account balance :)\nexport const payYourself20Bucks = userId => dispatch => {\n  const token = localStorage.getItem(\"token\");\n\n  dispatch({ type: PAY_YOURSELF_20_START });\n\n  axios\n    .put(\n      `https://buildtipease.herokuapp.com/serviceWorkers/pay/${userId}`,\n      { payment: 20 },\n      { headers: { authorization: token } }\n    )\n    .then(res => {\n      dispatch({ type: PAY_YOURSELF_20_SUCCESS });\n    })\n    .catch(err => {\n      dispatch({ type: PAY_YOURSELF_20_FAIL });\n    });\n};\n\nexport const getAllServiceWorkers = () => dispatch => {\n  const token = localStorage.getItem(\"token\");\n  dispatch({ type: GET_ALL_SW_START });\n  axios\n    .get(\"https://buildtipease.herokuapp.com/serviceWorkers\", {\n      headers: { authorization: token }\n    })\n    .then(res => {\n      dispatch({ type: GET_ALL_SW_SUCCESS, payload: res.data });\n    })\n    .catch(err => {\n      dispatch({ type: GET_ALL_SW_FAIL });\n    });\n};\n\nexport const tipServiceWorker = (id, payment) => dispatch => {\n  const token = localStorage.getItem(\"token\");\n  axios\n    .put(\n      `https://buildtipease.herokuapp.com/serviceWorkers/pay/${id}`,\n      payment,\n      { headers: { authorization: token } }\n    )\n    .then(res => {\n      console.log(res);\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nexport const rateServiceWorker = (id, rating) => dispatch => {\n  const token = localStorage.getItem(\"token\");\n  axios\n    .put(`https://buildtipease.herokuapp.com/serviceWorkers/rate/${id}`, {\n      headers: { authorization: token }\n    })\n    .then(res => {\n      console.log(res);\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n"]},"metadata":{},"sourceType":"module"}